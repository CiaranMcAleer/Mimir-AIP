# Pipeline: TestAllFunctions
# This pipeline exercises all major plugins with real APIs and data (except WebScraping and SentimentAnalysis).
# Each step is documented and chained for meaningful integration testing.
pipelines:
  - name: Test All Functions Pipeline
    enabled: true
    schedule: "*/10 * * * *"  # Every 10 minutes for scheduler test
    steps:
      # --- Input Plugins ---
      - name: FetchAircraftData
        plugin: Input.ADSBdata
        config:
          lat: 54.6079  # Belfast
          lon: -5.9264
          radius: 50
        output: aircraft_data
      - name: FormatAircraftData
        plugin: Data_Processing.AircraftDataFormatter
        config:
          input_key: aircraft_data
          output_key: aircraft_data_html
        output: aircraft_data_html
      - name: FetchTrafficCamera
        plugin: Input.TrafficWatchNIImage
        config:
          camera_id: 1  # Chichester Street, known-good from cache
          save_to_disk: true
        output: traffic_image_path
      - name: LogTrafficCameraContext
        plugin: Data_Processing.ContextLogger
        config:
          log_values: true
        output: log_traffic_camera_context
      - name: LogPreImageToBase64Context
        plugin: Data_Processing.ContextLogger
        config:
          log_values: true
        output: log_pre_image_to_base64_context
      - name: FetchWhiteHouseReport
        plugin: Input.WhiteHousePressPool
        config:
          limit: 1
        output: wh_report
      - name: FetchBloombergNews
        plugin: Input.bloomberg
        config:
          params:
            token: "glassdoor:gd4bloomberg"
            ageHours: 120
            limit: 3
        output: bloomberg
      - name: LogPostBloombergContext
        plugin: Data_Processing.ContextLogger
        config:
          log_values: true
        output: log_post_bloomberg_context
      - name: FetchRSSFeed
        plugin: Input.rss_feed
        config:
          url: "http://feeds.bbci.co.uk/news/world/rss.xml"
          limit: 3
        output: rss_feed
      - name: LogPostRSSContext
        plugin: Data_Processing.ContextLogger
        config:
          log_values: true
        output: log_post_rss_context
      - name: ArchiveSearch
        plugin: Input.archive_web_search
        config:
          query: "bbc.com"
          limit: 2
        output: archive_web_search
      - name: LogPostArchiveContext
        plugin: Data_Processing.ContextLogger
        config:
          log_values: true
        output: log_post_archive_context
      # Note: api plugin not loaded, so this step is commented out
      #- name: PublicAPIQuery
      #  plugin: Input.api
      #  config:
      #    url: "https://jsonplaceholder.typicode.com/posts"
      #    params:
      #      _limit: 2
      #  output: api_data
      - name: GeocodePostcodes
        plugin: Data_Processing.PostcodeGeocoding
        config:
          postcodes: ["SW1A 1AA", "EC1A 1BB"]
        output: postcode_geocoding

      # --- Data Processing Plugins ---
      - name: LogPreAggregateNewsContext
        plugin: Data_Processing.ContextLogger
        config:
          log_values: true
        output: log_pre_aggregate_news_context
      - name: AggregateNews
        plugin: Data_Processing.ContextAggregator
        config:
          key: all_news
          value: bloomberg
        output: all_news
      - name: LogPostAggregateNewsContext
        plugin: Data_Processing.ContextLogger
        config:
          log_values: true
        output: log_post_aggregate_news_context
      - name: LogPreAggregateRSSContext
        plugin: Data_Processing.ContextLogger
        config:
          log_values: true
        output: log_pre_aggregate_rss_context
      - name: AggregateRSS
        plugin: Data_Processing.ContextAggregator
        config:
          key: all_news
          value: rss_feed
        output: all_news
      - name: LogPreAggregateArchiveContext
        plugin: Data_Processing.ContextLogger
        config:
          log_values: true
        output: log_pre_aggregate_archive_context
      - name: AggregateArchive
        plugin: Data_Processing.ContextAggregator
        config:
          key: all_news
          value: archive_web_search
        output: all_news
      - name: LogAllNewsContext
        plugin: Data_Processing.ContextLogger
        config:
          log_values: true
        output: log_all_news_context
      - name: LogPrePromoteHeadlineContext
        plugin: Data_Processing.ContextLogger
        config:
          log_values: true
        output: log_pre_promote_headline_context
      - name: PromoteHeadline
        plugin: Data_Processing.ContextPromoter
        config:
          source: "all_news[0]['title']"
          target: main_headline
        output: main_headline
      - name: LogPostPromoteHeadlineContext
        plugin: Data_Processing.ContextLogger
        config:
          log_values: true
        output: log_post_promote_headline_context
      - name: LogPreImageToBase64Context
        plugin: Data_Processing.ContextLogger
        config:
          log_values: true
        output: log_pre_image_to_base64_context
      - name: ImageToBase64
        plugin: Data_Processing.ImageToBase64
        config:
          input_key: traffic_image_path
          output_key: image_base64
        output: image_base64
      - name: LogPostImageToBase64Context
        plugin: Data_Processing.ContextLogger
        config:
          log_values: true
        output: log_post_image_to_base64_context
      - name: LogPostImageToBase64Context
        plugin: Data_Processing.ContextLogger
        config:
          log_values: true
        output: log_post_image_to_base64_context
      - name: LogPreLLMHeadlineSummaryContext
        plugin: Data_Processing.ContextLogger
        config:
          log_values: true
        output: log_pre_llm_headline_summary_context
      - name: LLMHeadlineSummary
        plugin: Data_Processing.LLMFunction
        config:
          llm_plugin: AIModels.OpenRouter
          model: "openai/gpt-3.5-turbo"
          messages:
            - role: user
              content: "Summarize this headline: {{ main_headline }}"
          input: main_headline
          output_key: headline_summary
        output: headline_summary
      - name: LogPostLLMHeadlineSummaryContext
        plugin: Data_Processing.ContextLogger
        config:
          log_values: true
        output: log_post_llm_headline_summary_context
      - name: ExtractNewsUrls
        plugin: Data_Processing.ExtractURLStrings
        config:
          input_key: all_news
          output_key: news_urls
        output: news_urls
      - name: LogPostExtractNewsUrlsContext
        plugin: Data_Processing.ContextLogger
        config:
          log_values: true
        output: log_post_extract_news_urls_context
      # Moondream Caption step placeholder (plugin not found)
      # - name: MoondreamCaption
      #   plugin: Data_Processing.Moondream
      #   config:
      #     image_path: traffic_image_path
      #     task: caption
      #     output_key: moondream_caption
      #   output: moondream_caption
      - name: SaveContextToFile
        plugin: Data_Processing.ContextToFile
        config:
          variable: all_news
          filename: output/all_news.json
          append: false
        output: saved_news
      - name: LoadContextFromFile
        plugin: Data_Processing.FileToContext
        config:
          filename: output/all_news.json
          variable: loaded_news
        output: loaded_news
      - name: LogPreHTMLReportContext
        plugin: Data_Processing.ContextLogger
        config:
          log_values: true
        output: log_pre_html_report_context
      - name: GenerateMap
        plugin: Output.LeafletJSmap
        config:
          title: "Test Map"
          center: [54.6079, -5.9264]
          zoom: 6
          markers:
            - lat: 54.6079
              lon: -5.9264
              popup: "Belfast (Aircraft)"
            - lat: 54.6079
              lon: -5.9264
              popup: "Traffic Camera"
          export_mode: embed
        output: map_html
      - name: GenerateHTMLReport
        plugin: Output.HTMLReport
        config:
          title: "Test All Functions Pipeline Report"
          sections:
            - heading: "Headline Summary"
              text: "{headline_summary}"
            - heading: "News URLs"
              text: "{news_urls}"
            - heading: "Aircraft Data"
              text: "{aircraft_data_html}"
            - heading: "Traffic Camera Image"
              text: "<img src='data:image/jpeg;base64,{image_base64}' />"
            - heading: "Map"
              text: "{map_html}"
          filename: test_report.html
        output: html_report_path

      # --- Output Plugins ---
