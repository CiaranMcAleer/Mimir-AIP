# This workflow builds binaries and commits them to the main branch under releases/<tag>/.
# WARNING: Storing binaries in git will increase repo size over time.
# Make sure branch protection allows GitHub Actions to push to main.

name: Build & Package Binaries

on:
  push:
    tags:
      - 'v*.*.*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag of the release to use for the folder name (e.g. v1.0.0)'
        required: true

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ['3.10']
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build with PyInstaller (one-dir + include data)
        shell: bash
        run: |
          SEPARATOR=":"
          if [[ "$RUNNER_OS" == "Windows" ]]; then SEPARATOR=";"; fi
          pyinstaller \
            --clean \
            --onedir \
            --name mimir-aip-${{ matrix.os }} \
            --add-data "config.yaml${SEPARATOR}." \
            --add-data "src/pipelines${SEPARATOR}pipelines" \
            --add-data "src/Plugins${SEPARATOR}Plugins" \
            src/main.py

      - name: Zip platform bundle (non-Windows)
        if: runner.os != 'Windows'
        run: |
          cd dist
          zip -r ../mimir-aip-${{ matrix.os }}.zip mimir-aip-${{ matrix.os }} src/pipelines config.yaml src/Plugins
          cd ..

      # Validate that the zip file was created successfully
      - name: Validate zip file creation
        if: runner.os != 'Windows'
        run: |
          if [ ! -f mimir-aip-${{ matrix.os }}.zip ]; then
            echo "ERROR: Zip file creation failed!"
            exit 1
          fi
          echo "Zip file mimir-aip-${{ matrix.os }}.zip created successfully."

      # Debug: Check zip process exit status and contents
      - name: Debug zip process
        if: runner.os != 'Windows'
        run: |
          echo "Checking zip process exit status and contents:"
          ls -al
          zipinfo mimir-aip-${{ matrix.os }}.zip || echo "Zip file is invalid or empty."

      # Debug: List contents of dist after zipping
      - name: Debug dist folder contents
        if: runner.os != 'Windows'
        run: |
          echo "Checking contents of dist folder:"
          ls -al dist

      # Debug: List contents of root after zipping
      - name: Debug zip file in root
        if: runner.os != 'Windows'
        run: |
          echo "Checking contents of root folder for zip file:"
          ls -al

      # Ensure the zip file exists before copying
      - name: Check zip file exists
        run: |
          if [ ! -f mimir-aip-${{ matrix.os }}.zip ]; then
            echo "ERROR: mimir-aip-${{ matrix.os }}.zip not found!"
            exit 1
          fi

      - name: Zip platform bundle (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Compress-Archive -Path "dist\mimir-aip-${{ matrix.os }}" -DestinationPath "mimir-aip-${{ matrix.os }}.zip"

      # Determine the tag to use for the release folder
      - name: Set release tag
        id: set_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "::set-output name=tag::${{ github.event.inputs.tag_name }}"
          elif [ "${{ github.event_name }}" = "release" ]; then
            echo "::set-output name=tag::${{ github.event.release.tag_name }}"
          else
            echo "::set-output name=tag::${{ github.ref_name }}"
          fi

      # Checkout main branch with write access
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy binaries to releases folder
        run: |
          mkdir -p releases/${{ steps.set_tag.outputs.tag }}
          cp mimir-aip-${{ matrix.os }}.zip releases/${{ steps.set_tag.outputs.tag }}/

      - name: Commit and push binaries
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add releases/${{ steps.set_tag.outputs.tag }}/mimir-aip-${{ matrix.os }}.zip
          git commit -m "Add binaries for ${{ steps.set_tag.outputs.tag }} [skip ci]" || echo "No changes to commit"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
