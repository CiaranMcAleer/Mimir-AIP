# This workflow builds binaries and commits them to the main branch under releases/<tag>/.
# WARNING: Storing binaries in git will increase repo size over time.
# Make sure branch protection allows GitHub Actions to push to main.

name: Build & Package Binaries

on:
  push:
    tags:
      - 'v*.*.*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag of the release to use for the folder name (e.g. v1.0.0)'
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ['3.10']
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Validate Python environment
        run: |
          python --version
          pip --version
          pip list

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
          pip check || { echo "Dependency conflicts detected!"; exit 1; }

      - name: Ensure required files and directories
        run: |
          echo "Verifying the presence of config.yaml and directories:"
          if [ ! -f "config.yaml" ]; then
            echo "WARNING: config.yaml not found, generating placeholder."
            echo "default_key: default_value" > config.yaml
          fi
          if [ ! -d "src/pipelines" ]; then
            echo "WARNING: src/pipelines directory not found, creating empty directory."
            mkdir -p src/pipelines
          fi
          if [ ! -d "src/Plugins" ]; then
            echo "WARNING: src/Plugins directory not found, creating empty directory."
            mkdir -p src/Plugins
          fi
          ls -al config.yaml src/pipelines src/Plugins

      - name: Validate Required Files
        run: |
          if [ ! -f "config.yaml" ]; then
            echo "ERROR: config.yaml not found!" && exit 1
          fi
          if [ ! -d "src/pipelines" ]; then
            echo "ERROR: src/pipelines directory not found!" && exit 1
          fi
          if [ ! -d "src/Plugins" ]; then
            echo "ERROR: src/Plugins directory not found!" && exit 1
          fi

      - name: Build with PyInstaller
        run: |
          SEPARATOR=":"
          if [[ "$RUNNER_OS" == "Windows" ]]; then SEPARATOR=";"; fi
          pyinstaller \
            --name mimir-aip-${{ matrix.os }} \
            --add-data "config.yaml${SEPARATOR}." \
            --add-data "src/pipelines${SEPARATOR}pipelines" \
            --add-data "src/Plugins${SEPARATOR}Plugins" \
            src/main.py

      - name: Validate and Zip Output
        run: |
          if [ ! -d "dist/mimir-aip-${{ matrix.os }}" ]; then
            echo "ERROR: mimir-aip-${{ matrix.os }} directory not found in dist!"
            exit 1
          fi
          echo "Listing dist contents:"
          ls -al dist
          cd dist
          zip -r ../mimir-aip-${{ matrix.os }}.zip mimir-aip-${{ matrix.os }}
          cd ..

      - name: Zip platform bundle (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd dist
          zip -r ../releases/${{ env.tag }}/mimir-aip-${{ matrix.os }}.zip mimir-aip-${{ matrix.os }}
          cd ..

      - name: Zip platform bundle (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (-Not (Test-Path -Path "dist\mimir-aip-${{ matrix.os }}")) {
            Write-Host "ERROR: mimir-aip-${{ matrix.os }} directory not found in dist!"
            exit 1
          }
          Compress-Archive -Path "dist\mimir-aip-${{ matrix.os }}" -DestinationPath "mimir-aip-${{ matrix.os }}.zip"

      - name: Validate zip file
        run: |
          if [ ! -f mimir-aip-${{ matrix.os }}.zip ]; then
            echo "ERROR: mimir-aip-${{ matrix.os }}.zip not found!"
            exit 1
          fi
          echo "Zip file mimir-aip-${{ matrix.os }}.zip created successfully."

      - name: Install GitHub CLI
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update && sudo apt-get install -y gh
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install gh
          else
            echo "Unsupported OS for GitHub CLI installation" && exit 1
          fi

      - name: Set release tag
        id: set_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" = "release" ]; then
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          else
            echo "tag=${{ github.ref_name }}" >> $GITHUB_ENV
          fi

      - name: Copy binaries to releases folder
        run: |
          mkdir -p releases/${{ env.tag }}
          cp mimir-aip-${{ matrix.os }}.zip releases/${{ env.tag }}/

      - name: Commit and create pull request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          branch=add-binaries-${{ env.tag }}-${{ matrix.os }}
          git checkout -b $branch || git checkout $branch
          git add releases/${{ env.tag }}/mimir-aip-${{ matrix.os }}.zip
          git commit -m "Add binaries for ${{ env.tag }} [skip ci]" || echo "No changes to commit"
          git pull --rebase origin $branch || { echo "Conflict detected. Aborting rebase."; git rebase --abort; exit 1; }
          git push --force origin $branch
          gh pr create --title "Add binaries for ${{ env.tag }} (${{ matrix.os }})" --body "This PR adds binaries for ${{ env.tag }} (${{ matrix.os }})" --base main --head $branch --repo ${{ github.repository }} || { echo "Failed to create PR"; exit 1; }
