import pytest
import os
from Plugins.Output.HTMLReport.HTMLReport import HTMLReport

def test_html_report_initialization():
    """Test HTMLReport plugin initialization"""
    plugin = HTMLReport()
    assert isinstance(plugin, HTMLReport)

def test_html_report_generate():
    """Test generating HTML report with sample data"""
    plugin = HTMLReport()
    
    # Test with sample report data
    config = {
        "title": "Sample Report",
        "sections": "[{'heading': 'Introduction', 'text': 'This is a sample report generated by the HTMLReport plugin.'}, {'heading': 'Data Analysis', 'text': 'Here we present the analysis of the collected data.'}]",
        "output_dir": "reports"
    }
    
    result = plugin.execute_pipeline_step({
        "config": config,
        "output": "report.html"
    }, {})
    
    assert "report.html" in result
    assert isinstance(result["report.html"], str)
    
    # Verify the file exists
    assert os.path.exists(result["report.html"])
    
    # Read the file content
    with open(result["report.html"], "r") as f:
        html_content = f.read()
        assert "<title>Sample Report</title>" in html_content
        assert "<h2>Introduction</h2>" in html_content
        assert "<h2>Data Analysis</h2>" in html_content
        assert "This is a sample report generated by the HTMLReport plugin." in html_content
        assert "Here we present the analysis of the collected data." in html_content

def test_html_report_generate_default_and_custom_css():
    """
    Test HTMLReport plugin with both default and custom CSS themes.
    Generates two reports: one with the default theme, one with a custom dark theme.
    """
    plugin = HTMLReport()

    # Report with default (Mimir-AIP) theme
    config_default = {
        "title": "Default Theme Report",
        "sections": [
            {"heading": "Welcome", "text": "This report uses the default Mimir-AIP theme."},
            {"heading": "Details", "text": "All styling is inherited from the platform's GitHub Pages look."}
        ],
        "output_dir": "reports",
        "filename": "report_default.html"
    }
    result_default = plugin.execute_pipeline_step({
        "config": config_default,
        "output": "report_default.html"
    }, {})
    assert "report_default.html" in result_default
    assert os.path.exists(result_default["report_default.html"])

    # Report with custom CSS (dark theme)
    custom_css = '''
body { background: #181c20; color: #f3f3f3; font-family: 'Segoe UI', Arial, sans-serif; }
h1, h2 { color: #a3e635; }
.section { background: #23272e; border: 1px solid #333; box-shadow: 0 1px 8px rgba(0,0,0,0.3); }
.content { background: #23272e; }
a { color: #7dd3fc; }
a:hover { color: #38bdf8; }
footer { color: #7dd3fc; }
'''
    config_custom = {
        "title": "Custom Dark Theme Report",
        "sections": [
            {"heading": "Dark Mode", "text": "This report uses a custom dark theme via the 'css' field."},
            {"heading": "Contrast", "text": "Headings and links use accent colors for visibility."}
        ],
        "output_dir": "reports",
        "filename": "report_custom.html",
        "css": custom_css
    }
    result_custom = plugin.execute_pipeline_step({
        "config": config_custom,
        "output": "report_custom.html"
    }, {})
    assert "report_custom.html" in result_custom
    assert os.path.exists(result_custom["report_custom.html"])

    # Optionally, check that the custom CSS is present in the generated file
    with open(result_custom["report_custom.html"], "r") as f:
        html_content = f.read()
        assert "background: #181c20" in html_content
        assert "Custom Dark Theme Report" in html_content
        assert "Dark Mode" in html_content

    # Optionally, check that the default CSS is present in the default report
    with open(result_default["report_default.html"], "r") as f:
        html_content = f.read()
        assert "Default Theme Report" in html_content
        assert "Welcome" in html_content
        assert "Mimir-AIP" in html_content or "font-family" in html_content  # theme marker
